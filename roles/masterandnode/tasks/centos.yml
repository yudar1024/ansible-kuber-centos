- name: 'create kubelet folader'
  file:
    path: '/var/lib/kubelet'
    state: directory
  tags:
    - kubelet
    - masterandnode

- name: 'check kubelet existing'
  stat:
    path: '/usr/local/bin/kubelet'
  register: stat_result
  tags:
    - masterandnode

- name: 'copy kubelet file'
  copy:
    src: kubelet
    dest: /usr/local/bin/kubelet
    mode: '755'
    # mode: u=rwx,g=rx,o=rx
    # mode: u+rw,g-wx,o-rwx
  when: stat_result.stat.exists == False
  tags:
    - kubelet
    - masterandnode

- name: 'create kubelet service file'
  local_action:
    module: template
    src: kubelet.service.j2
    dest: kubelet.service
  tags:
    - kubelet
    - config
    - masterandnode

- name: 'create kubelet config json file'
  local_action:
    module: template
    src: kubelet.config.json.j2
    dest: kubelet.config.json
  tags:
    - kubelet
    - config
    - masterandnode

- name: 'copy kubelet service file'
  copy:
    src: kubelet.service
    dest: /etc/systemd/system/kubelet.service
  when: stat_result.stat.exists == False
  tags:
    - kubelet
    - masterandnode

- name: 'copy kubelet config json file'
  copy:
    src: kubelet.config.json
    dest: /etc/kubernetes/kubelet.config.json
  when: stat_result.stat.exists == False
  tags:
    - kubelet
    - masterandnode

- name: 'enable kubelet service'
  systemd:
    daemon_reload: yes
    enabled: yes
    name: kubelet
    state: restarted
  tags:
    - kubelet
    - masterandnode

- name: 'ls kubelet certification files '
  shell: 'ls -lt /etc/kubernetes/ssl/kubelet*'
  tags:
    - kubelet
    - masterandnode

- name: 'generate kube-proxy cert files'
  local_action: 'shell cfssl gencert -ca=roles/common/files/ca.pem -ca-key=roles/common/files/ca-key.pem -config=roles/common/files/config.json -profile=kubernetes  roles/masterandnode/files/kube-proxy-csr.json | cfssljson -bare kube-proxy'
  tags:
    - kubeproxy
    - masterandnode

- name: 'create kubelet folader'
  file:
    path: '/etc/kubernetes/ssl'
    state: directory
  tags:
    - kubeproxy
    - masterandnode

- name: 'copy kube-proxy-key.pem file'
  copy:
    src: kube-proxy-key.pem
    dest: /etc/kubernetes/ssl/kube-proxy-key.pem
  tags:
    - kubeproxy
    - masterandnode

- name: 'copy kube-proxy.pem file'
  copy:
    src: kube-proxy.pem
    dest: /etc/kubernetes/ssl/kube-proxy.pem
  tags:
    - kubeproxy
    - masterandnode

- name: 添加 kube-proxy 在集群中的配置
  shell: 'kubectl config set-cluster kubernetes --certificate-authority=/etc/kubernetes/ssl/ca.pem --embed-certs=true --server=https://127.0.0.1:6443 --kubeconfig=kube-proxy.kubeconfig'
  tags:
    - kubeproxy
    - masterandnode

- name: 配置  kube-proxy 客户端认证
  shell: 'kubectl config set-credentials kube-proxy --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig'
  tags:
    - kubeproxy
    - masterandnode


- name: 关联context 和集群
  shell: 'kubectl config set-context default --cluster=kubernetes --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig'
  tags:
    - kubeproxy
    - masterandnode


- name: 关联default context 和集群
  shell: 'kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig'
  tags:
    - kubeproxy
    - masterandnode

- debug:
    msg: "{{hostvars[groups.masterandnode[0]]['ansible_ssh_host']}}"
  tags:
    - kubeproxy
    - masterandnode
    - fetch

- name: 从远程拷贝回生成的 kube-proxy.kubeconfig
  fetch:
    src: /root/kube-proxy.kubeconfig
    dest: ./kube-proxy.kubeconfig
    flat: yes
  run_once: yes
  tags:
    - kubeproxy
    - masterandnode
    - fetch

- name: 'copy kube-proxy.kubeconfig to /etc/kubernetes/'
  copy:
    src: kube-proxy.kubeconfig
    dest: /etc/kubernetes/kube-proxy.kubeconfig
    remote_src: yes
  tags:
    - kubeproxy
    - masterandnode

- name: 安装IP set 相关工具
  yum:
    name: "{{ packages }}"
  vars:
    packages:
    - ipset
    - ipvsadm
    - conntrack-tools.x86_64
  tags:
    - kubeproxy
    - masterandnode

- name: '生成kube-proxy service文件'
  local_action:
    module: template
    src: 'kube-proxy.config.yaml.j2'
    dest: "kube-proxy.config-{{ansible_default_ipv4['address']}}.yaml"
  tags: 
    - masterandnode
    - config
    - kubeproxy

- name: 'copy kube-proxy.config.yaml'
  copy:
    src: "kube-proxy.config-{{ansible_default_ipv4['address']}}.yaml"
    dest: /etc/kubernetes/kube-proxy.config.yaml
  tags:
    - kubeproxy
    - masterandnode

- name: 'create kube-proxy folader'
  file:
    path: '/var/lib/kube-proxy'
    state: directory
  tags:
    - kubeproxy
    - masterandnode

- name: 'copy kube-proxy service file'
  copy:
    src: kube-proxy.service
    dest: /etc/systemd/system/kube-proxy.service
  tags:
    - kubeproxy
    - masterandnode

- name: 'check kube-proxy existing'
  stat:
    path: '/usr/local/bin/kube-proxy'
  register: kube_proxy_result
  tags:
    - kubeproxy
    - masterandnode
    - temp

- name: 'copy kube-proxy file'
  copy:
    src: kube-proxy
    dest: /usr/local/bin/kube-proxy
    mode: '755'
    # mode: u=rwx,g=rx,o=rx
    # mode: u+rw,g-wx,o-rwx
  when: kube_proxy_result.stat.exists == False
  tags:
    - kubeproxy
    - masterandnode
    - temp

- name: 'copy kube-proxy serivce file'
  copy:
    src: kube-proxy.service
    dest: /etc/systemd/system/kube-proxy.service
    # mode: u=rwx,g=rx,o=rx
    # mode: u+rw,g-wx,o-rwx
  tags:
    - kubeproxy
    - masterandnode
    - temp

- name: 'enable kube-proxy service'
  systemd:
    daemon_reload: yes
    enabled: yes
    name: kube-proxy
    state: restarted
  tags:
    - kubeproxy
    - masterandnode
    - temp